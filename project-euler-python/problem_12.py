# ---------------------------------------------------------------
# Project Euler Problem 12 | Eshan Uniyal
# December 2017, Python 3 | Updated March 2018
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#   1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?
# ---------------------------------------------------------------

import timerr


div = 500 # number of divisors desired

def divisors(num):
    divisors = []
    for i in range(1, int(num ** 0.5) + 1):
        if num % i == 0:
            if i not in divisors:
                divisors.append(i)
            if num // i not in divisors:
                divisors.append(num // i)
    return(len(divisors))

def main(desired_div):
    i = 1
    condition = False
    while condition == False:
        triangle = i * (i + 1) // 2
        triangleDiv = divisors(triangle)
        if triangleDiv >  desired_div:
            return(triangle)
        i += 1


timer.start()
print(main(div))
timer.end()