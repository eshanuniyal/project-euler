# ---------------------------------------------------------------
# Project Euler Problem 44 | Eshan Uniyal
# February 2018, Python 3
# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal
#   and D = |Pk − Pj| is minimised; what is the value of D?
# ---------------------------------------------------------------

import timer



def isPentagonal(num):
    if ((((24 * num + 1) ** 0.5) + 1) / 6) % 1 == 0:
        return(True)
    else:
        return(False)

def pentagonal(num):
    return(int(num * (3 * num - 1) // 2))

def main(): # runtime about 25 seconds
    pentagonals = [pentagonal(num) for num in range(1, 10000)]
    for Pd in pentagonals:
        # print(Pd)
        max = 0
        for Pj in pentagonals[0 : -1]:
            if pentagonals[pentagonals.index(Pj) + 1] - Pj > Pd: # to figure out the largest pentagonal number for
                # which the next pentagonal number exceeds desired Pd
                max = Pj
                break
        rel = pentagonals[0 : pentagonals.index(max) + 1] # list of relevant pentagonal numbers under limit
        for pent in rel[0 : - 2]:
            for pent2 in rel[rel.index(pent) + 1 : ]:
                if isPentagonal(pent2 - pent) and isPentagonal(pent2 + pent): # condition for answer
                    # print(pent, pent2, pent2 - pent, pent2 + pent)
                    return(pent2 - pent)

timer.start()
print(alt())
timer.end()

